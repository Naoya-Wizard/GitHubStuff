name: Python Application Build and Upload to Drive

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-upload:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check for Python file changes
      run: |
        $diffOutput = git diff --name-only ${{ github.event.before }} ${{ github.sha }}
        $changed_files = $diffOutput -split '\r?\n'
        Write-Output "Changed files: $changed_files"
        $py_files_changed = $false
        foreach ($file in $changed_files) {
          if ($file -match "\.py$" -and $file -ne "upload_to_drive.py") {
            $py_files_changed = $true
            break
          }
        }
        if (-not $py_files_changed) {
          Write-Output "No relevant Python files have changed, stopping the job."
          exit 1
        }
        echo "changed_files=$(($changed_files -join ' '))" | Out-File -Append -FilePath $env:GITHUB_ENV
      shell: pwsh

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11.1'

    - name: Install Dependencies from requirements.txt
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        $changed_files = $env:changed_files -split ' '
        foreach ($file in $changed_files) {
          if ($file -match "\.py$") {
            Write-Output "Processing file: $file"
            pyinstaller $file --onefile --noconsole
          }
        }
      shell: pwsh

    - name: List generated EXE files
      run: ls dist

    - name: Install Google Client Library
      run: pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

    - name: Find compiled EXE
      run: |
        $exePath = (Get-ChildItem -Path . -Filter *.exe -Recurse).FullName
        if (-not $exePath) {
          Write-Output "No EXE file found, stopping the job."
          exit 1
        }
        Write-Output "EXE path: $exePath"

    - name: Create Service Account JSON file
      run: |
        $json = $env:SERVICE_ACCOUNT_JSON | ConvertFrom-Json | ConvertTo-Json
        $json | Out-File -FilePath service_account.json -Encoding UTF8
      env:
        SERVICE_ACCOUNT_JSON: ${{ secrets.GCP_CREDENTIALS }}
      
    - name: Upload EXE files to Google Drive
      run: |
        $exePaths = (Get-ChildItem -Path . -Filter *.exe -Recurse).FullName
        foreach ($exePath in $exePaths) {
          Write-Output "Uploading EXE file: $exePath"
          $env:EXE_FILE = "$exePath"  # 環境変数を設定
          python upload_to_drive.py --folder "$DRIVE_FOLDER_ID"
        }
      env:
        DRIVE_FOLDER_ID: ${{ secrets.DRIVE_FOLDER_ID }}      

    - name: Collect EXE file names from dist folder
      id: collect_exe
      run: |
        $exePaths = (Get-ChildItem -Path ./dist -Filter *.exe -Recurse).FullName
        $exeFileNames = @()
        foreach ($exePath in $exePaths) {
          $exeFileName = [System.IO.Path]::GetFileName($exePath)
          $exeFileNames += $exeFileName
        }
        echo "::set-output name=EXE_FILE_NAMES::$(($exeFileNames -join ', '))"
    
    - name: Send message to Slack
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        DRIVE_FOLDER_ID: ${{ secrets.DRIVE_FOLDER_ID }}
        EXE_FILE_NAMES: ${{ steps.collect_exe.outputs.EXE_FILE_NAMES }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
      run: |
        $fileNames = $env:EXE_FILE_NAMES -split ', '
        $formattedNames = $fileNames -join "`n"
        $payload = @{
          channel = $env:SLACK_CHANNEL
          text = "*Update Information*`n`nGoogleDrive:`n<https://drive.google.com/drive/folders/$($env:DRIVE_FOLDER_ID)|folder link>`n`nApps:`n$formattedNames"
        }
        $jsonPayload = ConvertTo-Json -Compress -InputObject $payload
        $headers = @{
          'Authorization' = "Bearer $($env:SLACK_BOT_TOKEN)"
          'Content-type' = 'application/json'
        }
        Invoke-RestMethod -Uri 'https://slack.com/api/chat.postMessage' -Method Post -Headers $headers -Body $jsonPayload
  
